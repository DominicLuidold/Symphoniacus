package at.fhv.orchestraria.domain.model;

import at.fhv.orchestraria.domain.Imodel.IDuty;
import at.fhv.orchestraria.domain.Imodel.IDutyCategory;
import at.fhv.orchestraria.domain.Imodel.IDutyCategoryChangelog;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;

/**
 * @author generated by Intellij -  edited by Team C
 */

/*
 * Generated by IntelliJ
 */

@Entity
@Table(name = "dutyCategory", schema = "ni128610_1sql8")
public class DutyCategoryEntityC implements IDutyCategory, Serializable {
    private int dutyCategoryId;
    private String type;
    private boolean isRehearsal;
    private int points;
    private Collection<DutyEntityC> duties;
    private Collection<DutyCategoryChangelogEntityC> dutyCategoryChangelogs;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "dutyCategoryId")
    @Override
    public int getDutyCategoryId() {
        return dutyCategoryId;
    }

    public void setDutyCategoryId(int dutyCategoryId) {
        this.dutyCategoryId = dutyCategoryId;
    }

    @Basic
    @Column(name = "type")
    @Override
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @Basic
    @Column(name = "isRehearsal")
    @Override
    public boolean isRehearsal() {
        return isRehearsal;
    }

    public void setRehearsal(boolean rehearsal) {
        isRehearsal = rehearsal;
    }

    @Basic
    @Column(name = "points")
    @Override
    public int getPoints() {
        return points;
    }

    public void setPoints(int points) {
        this.points = points;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        DutyCategoryEntityC that = (DutyCategoryEntityC) o;
        return dutyCategoryId == that.dutyCategoryId &&
                isRehearsal == that.isRehearsal &&
                points == that.points &&
                Objects.equals(type, that.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(dutyCategoryId, type, isRehearsal, points);
    }

    @OneToMany(mappedBy = "dutyCategory")
    public Collection<DutyEntityC> getDuties() {
        return duties;
    }

    public void setDuties(Collection<DutyEntityC> dutiesByDutyCategoryId) {
        this.duties = dutiesByDutyCategoryId;
    }

    @OneToMany(mappedBy = "dutyCategory")
    public Collection<DutyCategoryChangelogEntityC> getDutyCategoryChangelogs() {
        return dutyCategoryChangelogs;
    }

    public void setDutyCategoryChangelogs(Collection<DutyCategoryChangelogEntityC> dutyCategoryChangelogsByDutyCategoryId) {
        this.dutyCategoryChangelogs = dutyCategoryChangelogsByDutyCategoryId;
    }

    /*
     *Interface methods
     */

    @Transient
    @Override
    public Collection<IDuty> getIDuties(){
        return Collections.unmodifiableCollection(getDuties());
    }

    @Transient
    @Override
    public Collection<IDutyCategoryChangelog> getIDutyCategoryChangelogs(){
        return Collections.unmodifiableCollection(getDutyCategoryChangelogs());
    }
}
