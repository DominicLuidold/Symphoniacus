package at.fhv.orchestraria.domain.model;

import at.fhv.orchestraria.domain.Imodel.IInstrumentationPosition;
import at.fhv.orchestraria.domain.Imodel.ISectionInstrumentation;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;

/**
 * @author generated by Intellij -  edited by Team C
 */

/*
 * Generated by IntelliJ
 */

@Entity
@Table(name = "sectionInstrumentation", schema = "ni128610_1sql8")
public class SectionInstrumentationEntityC implements ISectionInstrumentation, Serializable {
    private int sectionInstrumentationId;
    private Collection<InstrumentationPositionEntityC> instrumentationPositions;
    private InstrumentationEntityC instrumentation;
    private SectionEntityC section;
    private String predefinedSectionInstrumentation;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "sectionInstrumentationId")
    @Override
    public int getSectionInstrumentationId() {
        return sectionInstrumentationId;
    }

    public void setSectionInstrumentationId(int sectionInstrumentationId) {
        this.sectionInstrumentationId = sectionInstrumentationId;
    }


    @Basic
    @Column(name = "predefinedSectionInstrumentation")
    @Override
    public String getPredefinedSectionInstrumentation() {
        return predefinedSectionInstrumentation;
    }

    public void setPredefinedSectionInstrumentation(String predefinedSectionInstrumentation) {
        this.predefinedSectionInstrumentation = predefinedSectionInstrumentation;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        SectionInstrumentationEntityC that = (SectionInstrumentationEntityC) o;
        return sectionInstrumentationId == that.sectionInstrumentationId;
    }

    @Override
    public int hashCode() {
        return Objects.hash(sectionInstrumentationId);
    }

    @OneToMany(mappedBy = "sectionInstrumentation")
    public Collection<InstrumentationPositionEntityC> getInstrumentationPositions() {
        return instrumentationPositions;
    }

    public void setInstrumentationPositions(Collection<InstrumentationPositionEntityC> instrumentationPositionsBySectionInstrumentationId) {
        this.instrumentationPositions = instrumentationPositionsBySectionInstrumentationId;
    }

    @ManyToOne
    @JoinColumn(name = "instrumentationId", referencedColumnName = "instrumentationId")
    @Override
    public InstrumentationEntityC getInstrumentation() {
        return instrumentation;
    }

    public void setInstrumentation(InstrumentationEntityC instrumentation) {
        this.instrumentation = instrumentation;
    }

    @ManyToOne
    @JoinColumn(name = "sectionId", referencedColumnName = "sectionId")
    @Override
    public SectionEntityC getSection() {
        return section;
    }

    public void setSection(SectionEntityC section) {
        this.section = section;
    }


    /*
     * Interface methods
     */

    @Transient
    @Override
    public Collection<IInstrumentationPosition> getIInstrumentationPositions(){
        return Collections.unmodifiableCollection(getInstrumentationPositions());
    }
}
