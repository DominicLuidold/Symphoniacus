package at.fhv.orchestraria.domain.model;

import at.fhv.orchestraria.domain.integrationInterfaces.IntegratableDuty;
import at.fhv.orchestraria.domain.Imodel.IDuty;
import at.fhv.orchestraria.domain.Imodel.IDutyPosition;
import at.fhv.orchestraria.domain.Imodel.IDutySectionMonthlySchedule;

import javax.persistence.*;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.*;

/**
 * @author generated by Intellij -  edited by Team C
 */

/*
 * Generated by IntelliJ
 */

@Entity
@Table(name = "duty", schema = "ni128610_1sql8")
public class DutyEntityC implements IDuty, IntegratableDuty, Serializable {

    public static final String EVENING_DUTY_NAME = "EVENING";

    private int dutyId;
    private String description;
    private String timeOfDay;
    private LocalDateTime start;
    private LocalDateTime end;
    private WeeklyScheduleEntityC weeklySchedule;
    private DutyCategoryEntityC dutyCategory;
    private SeriesOfPerformancesEntityC seriesOfPerformances;
    private Collection<DutyPositionEntityC> dutyPositions;
    private Collection<DutySectionMonthlyScheduleEntityC> dutySectionMonthlySchedules;

    @Override
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "dutyId")
    public int getDutyId() {
        return dutyId;
    }

    public void setDutyId(int dutyId) {
        this.dutyId = dutyId;
    }

    @Basic
    @Column(name = "description")
    @Override
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Basic
    @Column(name = "timeOfDay")
    @Override
    public String getTimeOfDay() {
        return timeOfDay;
    }

    public void setTimeOfDay(String timeOfDay) {
        this.timeOfDay = timeOfDay;
    }

    @Basic
    @Column(name = "start")
    @Override
    public LocalDateTime getStart() {
        return start;
    }

    public void setStart(LocalDateTime start) {
        this.start = start;
    }

    @Basic
    @Column(name = "end")
    @Override
    public LocalDateTime getEnd() {
        return end;
    }

    public void setEnd(LocalDateTime end) {
        this.end = end;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        DutyEntityC that = (DutyEntityC) o;
        return dutyId == that.dutyId &&
                Objects.equals(description, that.description) &&
                Objects.equals(timeOfDay, that.timeOfDay) &&
                Objects.equals(start, that.start) &&
                Objects.equals(end, that.end);
    }

    @Override
    public int hashCode() {
        return Objects.hash(dutyId, description, timeOfDay, start, end);
    }

    @ManyToOne
    @JoinColumn(name = "weeklyScheduleId", referencedColumnName = "weeklyScheduleId", nullable = false)
    @Override
    public WeeklyScheduleEntityC getWeeklySchedule() {
        return weeklySchedule;
    }

    public void setWeeklySchedule(WeeklyScheduleEntityC weeklySchedule) {
        this.weeklySchedule = weeklySchedule;
    }

    @ManyToOne
    @JoinColumn(name = "dutyCategoryId", referencedColumnName = "dutyCategoryId", nullable = false)
    @Override
    public DutyCategoryEntityC getDutyCategory() {
        return dutyCategory;
    }

    public void setDutyCategory(DutyCategoryEntityC dutyCategory) {
        this.dutyCategory = dutyCategory;
    }

    @ManyToOne
    @JoinColumn(name = "seriesOfPerformancesId", referencedColumnName = "seriesOfPerformancesId")
    @Override
    public SeriesOfPerformancesEntityC getSeriesOfPerformances() {
        return seriesOfPerformances;
    }

    public void setSeriesOfPerformances(SeriesOfPerformancesEntityC seriesOfPerformances) {
        this.seriesOfPerformances = seriesOfPerformances;
    }

    @OneToMany(mappedBy = "duty")
    public Collection<DutyPositionEntityC> getDutyPositions() {
        return dutyPositions;
    }

    public void setDutyPositions(Collection<DutyPositionEntityC> dutyPositionsByDutyId) {
        this.dutyPositions = dutyPositionsByDutyId;
    }

    @OneToMany(mappedBy = "duty")
    public Collection<DutySectionMonthlyScheduleEntityC> getDutySectionMonthlySchedules() {
        return dutySectionMonthlySchedules;
    }

    public void setDutySectionMonthlySchedules(Collection<DutySectionMonthlyScheduleEntityC> dutySectionMonthlySchedulesByDutyId) {
        this.dutySectionMonthlySchedules = dutySectionMonthlySchedulesByDutyId;
    }

    /*
     *Interface methods
     */
    /**
     * Iterates all section instrumentations of an instrumentation and checks whether it matches the section ID entered.
     * @param sectionID The section ID the section instrumentation would refer to.
     * @return Returns the section instrumentation by section ID.
     */
    @Transient
    @Override
    public SectionInstrumentationEntityC getSectionInstrumentation(int sectionID) {
        if (seriesOfPerformances != null) {
            InstrumentationEntityC instrumentation = seriesOfPerformances.
                    getSeriesOfPerformancesInstrumentations().iterator().next().getInstrumentation(); //TODO: fixMe
                for (SectionInstrumentationEntityC sectionInstrumentation : instrumentation.getSectionInstrumentations()) {
                    if (sectionInstrumentation.getSection().getSectionId() == sectionID) {
                        return sectionInstrumentation;
                    }
                }
        }
        return null;
    }

    /**
     * Checks the duty's duty positions of the provided section if every instance has a musician assigned to them.
     * @param sectionID The section whose duties need to be checked.
     * @return Returns true if all positions of the section are assigned.
     */
    @Override
    @Transient
    public boolean isSectionCompletelyAssigned(int sectionID) {
        for (DutyPositionEntityC dPos : getDutyPositions()) {
            if (dPos.getSection().getSectionId() == sectionID && dPos.getMusician() == null) {
                return false;
            }
        }
        return true;
    }

    /**
     * Checks whether the duty is a rehearsal
     * @return Returns true if the duty is a rehearsal
     */
    @Override
    @Transient
    public boolean isRehearsal() {
        return dutyCategory.isRehearsal();
    }

    /**
     * @return Returns the duty category description
     */
    @Override
    @Transient
    public String getDutyCategoryDescription() {
        return dutyCategory.getType();
    }

    /** TODO: Entfernen
     * Iterates all musical pieces of a series of performance
     * @return Returns the name of the musical piece as string
     */
    @Override
    @Transient
    public String getMusicalPieceString() {
        //check if the duty is a series of perfomance - should be empty if not
        String musicalPiece = "";
        int count = 0;
        if (getSeriesOfPerformances() != null) {
            for (SeriesOfPerformancesMusicalPieceEntityC sopmusicalpiece : getSeriesOfPerformances().getSeriesOfPerformancesMusicalPieces()) {
                if(count<1){
                    musicalPiece = sopmusicalpiece.getMusicalPiece().getName() + " ";
                    count++;
                }else{
                    count++;
                }
            }
            if(count >1){
                musicalPiece+= " + " + (count-1) + " other";
                if(count>2){
                    musicalPiece+="s";
                }
            }
        } else {
            musicalPiece = "-";
        }
        return musicalPiece;
    }

    /**
     * Iterates all musical pieces of a series of performance and gets the assigned composer
     * @return Returns the name of the composer as string
     */
    @Override
    @Transient
    public String getComposerString() {
        //check if the duty is a series of perfomance - should be empty if not
        List<String> composers = new LinkedList<>();
        String composerStr = "";
        if (getSeriesOfPerformances() != null) {
            for (SeriesOfPerformancesMusicalPieceEntityC sopmusicalpiece : getSeriesOfPerformances().getSeriesOfPerformancesMusicalPieces()) {
                if(composers.size()==0){
                   composerStr = sopmusicalpiece.getMusicalPiece().getComposer();
                   composers.add(composerStr);
                }else{
                    if(!composers.contains(sopmusicalpiece.getMusicalPiece().getComposer())) {
                        composers.add(sopmusicalpiece.getMusicalPiece().getComposer());
                    }
                }
            }
            if(composers.size() >1){
                composerStr+= " + " + (composers.size()-1) + " other";
                if(composers.size()>2){
                    composerStr+="s";
                }
            }
        } else {
            composerStr = "-";
        }
        return composerStr;
    }

    /**
     * Checks whether a instrumentation exists for the performance series
     * @return Returns the instrumentation as string
     */
    @Override
    @Transient
    public String getInstrumentationString() {
        String instrumentation = "";
        List<String> instrumentations = new LinkedList<>();
        if (getSeriesOfPerformances() != null) {
            for (SeriesOfPerformancesInstrumentationEntityC sopmusicalpiece : getSeriesOfPerformances().getSeriesOfPerformancesInstrumentations()) {
                if(instrumentations.size()==0){
                    instrumentation = sopmusicalpiece.getInstrumentation().getName();
                    instrumentations.add(instrumentation);
                }else{
                    if(!instrumentations.contains(sopmusicalpiece.getInstrumentation().getName())) {
                        instrumentations.add(sopmusicalpiece.getInstrumentation().getName());
                    }
                }
            }
            if(instrumentations.size() >1){
                instrumentation+= " + " + (instrumentations.size()-1) + " other";
                if(instrumentations.size()>2){
                    instrumentation+="s";
                }
            }
        } else {
            instrumentation = "-";
        }
        return instrumentation;
    }

    /**
     * @return Returns unmodifiable collection of duty positions by duty ID
     */
    @Transient
    @Override
    public Collection<IDutyPosition> getIDutyPositions() {
        return Collections.unmodifiableCollection(getDutyPositions());
    }

    /**
     * @return Returns unmodifiable collection of duties of section monthly schedule by duty ID
     */
    @Transient
    @Override
    public Collection<IDutySectionMonthlySchedule> getIDutySectionMonthlySchedules() {
        return Collections.unmodifiableCollection(getDutySectionMonthlySchedules());
    }

}
