package at.fhv.orchestraria.domain.model;

import at.fhv.orchestraria.domain.Imodel.IContractualObligation;
import at.fhv.orchestraria.domain.Imodel.IInstrumentCategory;
import at.fhv.orchestraria.domain.Imodel.IInstrumentCategoryMusician;
import at.fhv.orchestraria.domain.Imodel.ISectionInstrumentCategory;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;

/**
 * @author generated by Intellij -  edited by Team C
 */

/*
 * Generated by IntelliJ
 */

@Entity
@Table(name = "instrumentCategory", schema = "ni128610_1sql8")
public class InstrumentCategoryEntity implements IInstrumentCategory, Serializable {
    private int instrumentCategoryId;
    private String description;
    private Collection<ContractualObligationEntity> contractualObligations;
    private Collection<InstrumentCategoryMusicianEntity> instrumentCategoryMusicians;
    private Collection<SectionInstrumentCategoryEntity> sectionInstrumentCategories;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "instrumentCategoryId")
    @Override
    public int getInstrumentCategoryId() {
        return instrumentCategoryId;
    }

    public void setInstrumentCategoryId(int instrumentCategoryId) {
        this.instrumentCategoryId = instrumentCategoryId;
    }

    @Basic
    @Column(name = "description")
    @Override
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        InstrumentCategoryEntity that = (InstrumentCategoryEntity) o;
        return instrumentCategoryId == that.instrumentCategoryId &&
                Objects.equals(description, that.description);
    }

    @Override
    public int hashCode() {
        return Objects.hash(instrumentCategoryId, description);
    }

    @OneToMany(mappedBy = "instrumentCategory")
    public Collection<ContractualObligationEntity> getContractualObligations() {
        return contractualObligations;
    }

    public void setContractualObligations(Collection<ContractualObligationEntity> contractualObligationsByInstrumentCategoryId) {
        this.contractualObligations = contractualObligationsByInstrumentCategoryId;
    }

    @OneToMany(mappedBy = "instrumentCategory")
    public Collection<InstrumentCategoryMusicianEntity> getInstrumentCategoryMusicians() {
        return instrumentCategoryMusicians;
    }

    public void setInstrumentCategoryMusicians(Collection<InstrumentCategoryMusicianEntity> instrumentCategoryMusiciansByInstrumentCategoryId) {
        this.instrumentCategoryMusicians = instrumentCategoryMusiciansByInstrumentCategoryId;
    }

    @OneToMany(mappedBy = "instrumentCategory")
    public Collection<SectionInstrumentCategoryEntity> getSectionInstrumentCategories() {
        return sectionInstrumentCategories;
    }

    public void setSectionInstrumentCategories(Collection<SectionInstrumentCategoryEntity> sectionInstrumentCategoriesByInstrumentCategoryId) {
        this.sectionInstrumentCategories = sectionInstrumentCategoriesByInstrumentCategoryId;
    }

    /*
     *Interface methods
     */

    @Transient
    @Override
    public Collection<IContractualObligation> getIContractualObligations(){
        return Collections.unmodifiableCollection(getContractualObligations());
    }

    @Transient
    @Override
    public Collection<IInstrumentCategoryMusician> getIInstrumentCategoryMusicians(){
        return Collections.unmodifiableCollection(getInstrumentCategoryMusicians());
    }

    @Transient
    @Override
    public Collection<ISectionInstrumentCategory> getISectionInstrumentCategories(){
        return Collections.unmodifiableCollection(getSectionInstrumentCategories());
    }

}
