package at.fhv.orchestraria.domain.model;

import at.fhv.orchestraria.domain.Imodel.*;
import at.fhv.orchestraria.domain.integrationInterfaces.IntegratableDutyPosition;
import at.fhv.orchestraria.domain.integrationInterfaces.IntegratableSection;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;

/**
 * @author generated by Intellij -  edited by Team C
 */

@Entity
@Table(name = "section", schema = "ni128610_1sql8")
public class SectionEntityC implements ISection, IntegratableSection, Serializable {
    private int sectionId;
    private String sectionShortcut;
    private String description;
    private Collection<DutyPositionEntityC> dutyPositions;
    private Collection<MusicianEntityC> musicians;
    private Collection<SectionInstrumentationEntityC> sectionInstrumentations;
    private Collection<SectionMonthlyScheduleEntityC> sectionMonthlySchedules;
    private Collection<SectionInstrumentCategoryEntityC> sectionInstrumentCategories;


    /*
     *Methods created by Team C
     */

    /**
     * @return Returns true if a correct section shortcut is used
     */
    @Transient
    private boolean isStringSection(){
        return sectionShortcut.equals("Vl1")|| sectionShortcut.equals("Vl2")|| sectionShortcut.equals("Vla")||sectionShortcut.equals("Vc")||sectionShortcut.equals("Kb");
    }


    /**
     * @return Returns true if section shortcut is correct for the brass section
     */
    @Transient
    public boolean isBrassSection(){
        return sectionShortcut.equals("Fl/Ob/Kl/Fg") || sectionShortcut.equals("Hr/Trp/Pos/Tb");
    }


    /*
     * Generated by IntelliJ
     */


    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "sectionId")
    @Override
    public int getSectionId() {
        return sectionId;
    }

    public void setSectionId(int sectionId) {
        this.sectionId = sectionId;
    }

    @Basic
    @Column(name = "sectionShortcut")
    @Override
    public String getSectionShortcut() {
        return sectionShortcut;
    }

    public void setSectionShortcut(String sectionShortcut) {
        this.sectionShortcut = sectionShortcut;
    }

    @Basic
    @Column(name = "description")
    @Override
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        SectionEntityC that = (SectionEntityC) o;
        return sectionId == that.sectionId &&
                Objects.equals(sectionShortcut, that.sectionShortcut) &&
                Objects.equals(description, that.description);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sectionId, sectionShortcut, description);
    }

    @OneToMany(mappedBy = "section")
    public Collection<DutyPositionEntityC> getDutyPositions() {
        return dutyPositions;
    }

    public void setDutyPositions(Collection<DutyPositionEntityC> dutyPositionsBySectionId) {
        this.dutyPositions = dutyPositionsBySectionId;
    }

    @OneToMany(mappedBy = "section")
    public Collection<MusicianEntityC> getMusicians() {
        return musicians;
    }

    public void setMusicians(Collection<MusicianEntityC> musiciansBySectionId) {
        this.musicians = musiciansBySectionId;
    }

    @OneToMany(mappedBy = "section")
    public Collection<SectionInstrumentationEntityC> getSectionInstrumentations() {
        return sectionInstrumentations;
    }

    public void setSectionInstrumentations(Collection<SectionInstrumentationEntityC> sectionInstrumentationsBySectionId) {
        this.sectionInstrumentations = sectionInstrumentationsBySectionId;
    }

    @OneToMany(mappedBy = "section")
    public Collection<SectionMonthlyScheduleEntityC> getSectionMonthlySchedules() {
        return sectionMonthlySchedules;
    }

    public void setSectionMonthlySchedules(Collection<SectionMonthlyScheduleEntityC> sectionMonthlySchedulesBySectionId) {
        this.sectionMonthlySchedules = sectionMonthlySchedulesBySectionId;
    }

    @OneToMany(mappedBy = "section")
    public Collection<SectionInstrumentCategoryEntityC> getSectionInstrumentCategories() {
        return sectionInstrumentCategories;
    }

    public void setSectionInstrumentCategories(Collection<SectionInstrumentCategoryEntityC> sectionInstrumentCategoriesBySectionId) {
        this.sectionInstrumentCategories = sectionInstrumentCategoriesBySectionId;
    }


    /*
     * Interface methods
     */

    @Transient
    @Override
    public Collection<IDutyPosition> getIDutyPositions(){
        return Collections.unmodifiableCollection(getDutyPositions());
    }

    @Transient
    @Override
    public Collection<IntegratableDutyPosition> getIntegratableDutyPositions(){
        return Collections.unmodifiableCollection(getDutyPositions());
    }

    @Transient
    @Override
    public Collection<IMusician> getIMusicians(){
        return Collections.unmodifiableCollection(getMusicians());
    }

    @Transient
    @Override
    public Collection<ISectionInstrumentation> getISectionInstrumentations(){
        return Collections.unmodifiableCollection(getSectionInstrumentations());
    }

    @Transient
    @Override
    public Collection<ISectionMonthlySchedule> getISectionMonthlySchedules(){
        return Collections.unmodifiableCollection(getSectionMonthlySchedules());
    }

    @Transient
    @Override
    public Collection<ISectionInstrumentCategory> getISectionInstrumentCategories(){
        return Collections.unmodifiableCollection(getSectionInstrumentCategories());
    }

    //Passen die Bedingungen so?
    @Transient
    @Override
    public int getCountOfRequiredSectionPrincipals(String dutyCategoryDescription){
        int requiredLeaders = 0;
        if(isStringSection()){//SectionType: Strings
            if(dutyCategoryDescription!=null && dutyCategoryDescription.contains("Oper")){
                requiredLeaders = 1;
            }else if (dutyCategoryDescription!=null && dutyCategoryDescription.contains("Konzert")){
                requiredLeaders = 3;
            }else {
                requiredLeaders = 2;
            }
        }
        return requiredLeaders;
    }
}
