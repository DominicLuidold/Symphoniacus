package at.fhv.orchestraria.domain.model;

import at.fhv.orchestraria.domain.Imodel.IInstrumentation;
import at.fhv.orchestraria.domain.Imodel.IMusicalPiece;
import at.fhv.orchestraria.domain.Imodel.ISeriesOfPerformancesMusicalPiece;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;

/**
 * @author generated by Intellij -  edited by Team C
 */

/*
 * Generated by IntelliJ
 */

@Entity
@Table(name = "musicalPiece", schema = "ni128610_1sql8")
public class MusicalPieceEntity implements IMusicalPiece, Serializable {
    private int musicalPieceId;
    private String name;
    private String composer;
    private String category;
    private Collection<InstrumentationEntity> instrumentations;
    private Collection<SeriesOfPerformancesMusicalPieceEntity> seriesOfPerformancesMusicalPieces;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "musicalPieceId")
    @Override
    public int getMusicalPieceId() {
        return musicalPieceId;
    }

    public void setMusicalPieceId(int musicalPieceId) {
        this.musicalPieceId = musicalPieceId;
    }

    @Basic
    @Column(name = "name")
    @Override
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Basic
    @Column(name = "composer")
    @Override
    public String getComposer() {
        return composer;
    }

    public void setComposer(String composer) {
        this.composer = composer;
    }

    @Basic
    @Column(name = "category")
    @Override
    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        MusicalPieceEntity that = (MusicalPieceEntity) o;
        return musicalPieceId == that.musicalPieceId &&
                Objects.equals(name, that.name) &&
                Objects.equals(composer, that.composer) &&
                Objects.equals(category, that.category);
    }

    @Override
    public int hashCode() {
        return Objects.hash(musicalPieceId, name, composer, category);
    }

    @OneToMany(mappedBy = "musicalPiece")
    public Collection<InstrumentationEntity> getInstrumentations() {
        return instrumentations;
    }

    public void setInstrumentations(Collection<InstrumentationEntity> instrumentationsByMusicalPieceId) {
        this.instrumentations = instrumentationsByMusicalPieceId;
    }

    @OneToMany(mappedBy = "musicalPiece")
    public Collection<SeriesOfPerformancesMusicalPieceEntity> getSeriesOfPerformancesMusicalPieces() {
        return seriesOfPerformancesMusicalPieces;
    }

    public void setSeriesOfPerformancesMusicalPieces(Collection<SeriesOfPerformancesMusicalPieceEntity> seriesOfPerformancesMusicalPiecesByMusicalPieceId) {
        this.seriesOfPerformancesMusicalPieces = seriesOfPerformancesMusicalPiecesByMusicalPieceId;
    }

    /*
     * Interface methods
     */

    @Transient
    @Override
    public Collection<IInstrumentation> getIInstrumentations(){
        return Collections.unmodifiableCollection(getInstrumentations());

    }

    @Transient
    @Override
    public Collection<ISeriesOfPerformancesMusicalPiece> getISeriesOfPerformancesMusicalPieces(){
        return Collections.unmodifiableCollection(getSeriesOfPerformancesMusicalPieces());

    }
}
