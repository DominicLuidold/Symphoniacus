package at.fhv.orchestraria.domain.model;

import at.fhv.orchestraria.domain.Imodel.*;
import at.fhv.orchestraria.domain.integrationInterfaces.IntegratableSeriesOfPerformances;

import javax.persistence.*;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;

/**
 * @author generated by Intellij -  edited by Team C
 */

/*
 * Generated by IntelliJ
 */

@Entity
@Table(name = "seriesOfPerformances", schema = "ni128610_1sql8")
public class SeriesOfPerformancesEntity implements ISeriesOfPerformances, IntegratableSeriesOfPerformances, Serializable {
    private int seriesOfPerformancesId;
    private String description;
    private LocalDate startDate;
    private LocalDate endDate;
    private boolean isTour;
    private Collection<DutyEntity> duties;
    private Collection<NegativeDutyWishEntity> negativeDutyWishes;
    private Collection<PositiveWishEntity> positiveWishes;
    private Collection<SeriesOfPerformancesMusicalPieceEntity> seriesOfPerformancesMusicalPieces;
    private Collection<SeriesOfPerformancesInstrumentationEntity> seriesOfPerformancesInstrumentations;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "seriesOfPerformancesId")
    @Override
    public int getSeriesOfPerformancesId() {
        return seriesOfPerformancesId;
    }

    public void setSeriesOfPerformancesId(int seriesOfPerformancesId) {
        this.seriesOfPerformancesId = seriesOfPerformancesId;
    }

    @Basic
    @Column(name = "description")
    @Override
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Basic
    @Column(name = "startDate")
    @Override
    public LocalDate getStartDate() {
        return startDate;
    }

    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }

    @Basic
    @Column(name = "endDate")
    @Override
    public LocalDate getEndDate() {
        return endDate;
    }

    public void setEndDate(LocalDate endDate) {
        this.endDate = endDate;
    }

    @Basic
    @Column(name = "isTour")
    @Override
    public boolean isTour() {
        return isTour;
    }

    public void setTour(boolean tour) {
        isTour = tour;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        SeriesOfPerformancesEntity that = (SeriesOfPerformancesEntity) o;
        return seriesOfPerformancesId == that.seriesOfPerformancesId &&
                isTour == that.isTour &&
                Objects.equals(description, that.description) &&
                Objects.equals(startDate, that.startDate) &&
                Objects.equals(endDate, that.endDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(seriesOfPerformancesId, description, startDate, endDate, isTour);
    }

    @OneToMany(mappedBy = "seriesOfPerformances")
    public Collection<DutyEntity> getDuties() {
        return duties;
    }

    public void setDuties(Collection<DutyEntity> dutiesBySeriesOfPerformancesId) {
        this.duties = dutiesBySeriesOfPerformancesId;
    }

    @OneToMany(mappedBy = "seriesOfPerformances")
    public Collection<NegativeDutyWishEntity> getNegativeDutyWishes() {
        return negativeDutyWishes;
    }

    public void setNegativeDutyWishes(Collection<NegativeDutyWishEntity> negativeDutyWishesBySeriesOfPerformancesId) {
        this.negativeDutyWishes = negativeDutyWishesBySeriesOfPerformancesId;
    }

    @OneToMany(mappedBy = "seriesOfPerformances")
    public Collection<PositiveWishEntity> getPositiveWishes() {
        return positiveWishes;
    }

    public void setPositiveWishes(Collection<PositiveWishEntity> positiveWishesBySeriesOfPerformancesId) {
        this.positiveWishes = positiveWishesBySeriesOfPerformancesId;
    }

    @OneToMany(mappedBy = "seriesOfPerformances")
    public Collection<SeriesOfPerformancesMusicalPieceEntity> getSeriesOfPerformancesMusicalPieces() {
        return seriesOfPerformancesMusicalPieces;
    }

    public void setSeriesOfPerformancesMusicalPieces(Collection<SeriesOfPerformancesMusicalPieceEntity> seriesOfPerformancesMusicalPiecesBySeriesOfPerformancesId) {
        this.seriesOfPerformancesMusicalPieces = seriesOfPerformancesMusicalPiecesBySeriesOfPerformancesId;
    }

    @OneToMany(mappedBy = "seriesOfPerformances")
    public Collection<SeriesOfPerformancesInstrumentationEntity> getSeriesOfPerformancesInstrumentations() {
        return seriesOfPerformancesInstrumentations;
    }

    public void setSeriesOfPerformancesInstrumentations(Collection<SeriesOfPerformancesInstrumentationEntity> seriesOfPerformancesInstrumentations) {
        this.seriesOfPerformancesInstrumentations = seriesOfPerformancesInstrumentations;
    }

    /*
     * Interface methods
     */

    @Transient
    @Override
    public Collection<IDuty> getIDutiesBySeriesOfPerformancesId(){
        return Collections.unmodifiableCollection(getDuties());
    }

    @Transient
    @Override
    public Collection<INegativeDutyWish> getINegativeDutyWishes(){
        return Collections.unmodifiableCollection(getNegativeDutyWishes());
    }

    @Transient
    @Override
    public Collection<IPositiveWish> getIPositiveWishes(){
        return Collections.unmodifiableCollection(getPositiveWishes());
    }

    @Transient
    @Override
    public Collection<ISeriesOfPerformancesMusicalPiece> getISeriesOfPerformancesMusicalPieces(){
        return Collections.unmodifiableCollection(getSeriesOfPerformancesMusicalPieces());
    }

    @Transient
    @Override
    public Collection<ISeriesOfPerformancesInstrumentation> getISeriesOfPerformancesInstrumentations(){
        return Collections.unmodifiableCollection(getSeriesOfPerformancesInstrumentations());
    }

    @Transient
    @Override
    public int getTotalAmountOfSeriesOfPerformancePoints(){
        int total = 0;
        for(DutyEntity duty: duties){
            total+= duty.getDutyCategory().getPoints();
        }
        return total;
    }

}
