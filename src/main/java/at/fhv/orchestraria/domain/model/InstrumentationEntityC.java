package at.fhv.orchestraria.domain.model;

import at.fhv.orchestraria.domain.Imodel.*;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.Objects;

/**
 * @author generated by Intellij -  edited by Team C
 */

/*
 * Generated by IntelliJ
 */

@Entity
@Table(name = "instrumentation", schema = "ni128610_1sql8")
public class InstrumentationEntityC implements IInstrumentation, Serializable {
    private int instrumentationId;
    private String name;
    private MusicalPieceEntityC musicalPiece;
    private Collection<InstrumentationPositionEntityC> instrumentationPositions;
    private Collection<SectionInstrumentationEntityC> sectionInstrumentations;
    private Collection<SeriesOfPerformancesInstrumentationEntityC> seriesInstrumentations;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "instrumentationId")
    @Override
    public int getInstrumentationId() {
        return instrumentationId;
    }

    public void setInstrumentationId(int instrumentationId) {
        this.instrumentationId = instrumentationId;
    }

    @Basic
    @Column(name = "name")
    @Override
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        InstrumentationEntityC that = (InstrumentationEntityC) o;
        return instrumentationId == that.instrumentationId &&
                Objects.equals(name, that.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(instrumentationId, name);
    }

    @ManyToOne
    @JoinColumn(name = "musicalPieceId", referencedColumnName = "musicalPieceId", nullable = false)
    @Override
    public MusicalPieceEntityC getMusicalPiece() {
        return musicalPiece;
    }

    public void setMusicalPiece(MusicalPieceEntityC musicalPiece) {
        this.musicalPiece = musicalPiece;
    }

    @OneToMany(mappedBy = "instrumentation")
    public Collection<InstrumentationPositionEntityC> getInstrumentationPositions() {
        return instrumentationPositions;
    }

    public void setInstrumentationPositions(Collection<InstrumentationPositionEntityC> instrumentationPositionsByInstrumentationId) {
        this.instrumentationPositions = instrumentationPositionsByInstrumentationId;
    }

    @OneToMany(mappedBy = "instrumentation")
    public Collection<SectionInstrumentationEntityC> getSectionInstrumentations() {
        return sectionInstrumentations;
    }

    public void setSectionInstrumentations(Collection<SectionInstrumentationEntityC> sectionInstrumentationsByInstrumentationId) {
        this.sectionInstrumentations = sectionInstrumentationsByInstrumentationId;
    }

    @OneToMany(mappedBy = "instrumentation")
    public Collection<SeriesOfPerformancesInstrumentationEntityC> getSeriesInstrumentations() {
        return seriesInstrumentations;
    }

    public void setSeriesInstrumentations(Collection<SeriesOfPerformancesInstrumentationEntityC> seriesInstrumentations) {
        this.seriesInstrumentations = seriesInstrumentations;
    }

    /*
        Interface methods
     */

    @Transient
    @Override
    public Collection<IInstrumentationPosition> getIInstrumentationPositions(){
        return Collections.unmodifiableCollection(getInstrumentationPositions());
    }

    @Transient
    @Override
    public Collection<ISectionInstrumentation> getISectionInstrumentations(){
        return  Collections.unmodifiableCollection(getSectionInstrumentations());
    }

    @Transient
    @Override
    public Collection<ISeriesOfPerformancesInstrumentation> getISeriesOfPerformancesInstrumentation() {
        return Collections.unmodifiableCollection(getSeriesInstrumentations());
    }

}
